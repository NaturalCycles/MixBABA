#! /usr/bin/python

from argparse import ArgumentParser
import json
from mixbaba.mixbaba_utils import MixpanelAPI, get_funnels_list, analyze_funnel
from mixbaba.output_utils import return_output
from tqdm import tqdm


# parsing input arguments
parser = ArgumentParser(description='Analyze AB funnels from Mixpanel')
parser.add_argument("-v", "--verbosity", action="count", default=0,
                    help="increase output verbosity (max: -vv)")
parser.add_argument("-o", "--output", help="The form in which you want to get the output",
                    choices=["terminal", "csv", 'both'], default="terminal")
parser.add_argument("-of", "--output_format", help="The format in which the output will be visualized/recorded",
                    choices=["long", 'short'], default="short")
parser.add_argument("-f", "--funnels", help="The JSON file with the details about the funnels to be analyzed",
                    required=True)
parser.add_argument("-k", "--key", help="The key to authenticate within Mixpanel",
                    required=True)

args = parser.parse_args()

# opening Mixpanel API
api: MixpanelAPI = MixpanelAPI(token=args.key)

# getting the full list of funnels
flist_df = get_funnels_list(api)

detailed_steps = False
detailed_numbers = False
if args.verbosity >= 2:
    detailed_numbers = True
    detailed_steps = True
if args.verbosity >= 1:
    detailed_steps = True

# loading the json file containing the details about the funnels to be analyzed
funnels_json = args.funnels
if detailed_steps:
    print(f"loading funnels list from {funnels_json}")

with open(funnels_json, 'r') as file:
    funnels = json.load(file)


for funnel_details in tqdm(funnels, desc="Funnels completition"):
    ID = funnel_details['ID']

    # getting the name of the funnel
    fun_name = flist_df.loc[ID]['name']

    # sanity check
    if ("AB Groups" not in funnel_details.keys()) or ('Control' not in funnel_details["AB Groups"].keys()) or \
            ('Test' not in funnel_details["AB Groups"].keys()):
        raise KeyError(f'Control or Test group names not found in funnel {ID} : {fun_name}')
    output = []

    filters = funnel_details['filters']
    # the overall behavior (no filters applied)
    if detailed_steps:
        tqdm.write("--- --- Analyzing all data...")
    result = analyze_funnel(api=api, discriminant='None', cohort='All', funnel_details=funnel_details,
                            detailed=detailed_numbers)
    if detailed_steps:
        tqdm.write(f"--- --- --- --- {result['Comment']}")
    output.append(result)
    if result['Probability'] > 0.:
        # if the  result for the overall makes sense, we can filter it further

        for discriminant, cohorts in tqdm(filters.items(), desc="Discriminants for this funnel"):
            if detailed_steps:
                tqdm.write(f"--- --- Filtering by discriminant {discriminant}...")
            for cohort in tqdm(cohorts, desc="Cohorts for this discriminant"):
                if detailed_steps:
                    tqdm.write(f"--- --- --- Analyzing cohort {cohort}...")
                # result = analyze_funnel(api=api, funnel_id=ID, discriminant=discriminant, cohort=cohort,
                #                        from_date=from_date, to_date=to_date, i_field=i_field, c_field=c_field,
                #                        by=by, ab_groups=ab_groups, detailed=detailed_numbers)
                result = analyze_funnel(api=api, discriminant=discriminant, cohort=cohort,
                                        funnel_details=funnel_details, detailed=detailed_numbers)

                if detailed_steps:
                    tqdm.write(f"--- --- --- --- {result['Comment']}")
                output.append(result)

    # finally, returning the output
    ab_groups = funnel_details['AB Groups']
    # TODO: maybe add logs,
    # https://medium.com/@galea/python-logging-example-with-color-formatting-file-handlers-6ee21d363184
    return_output(what=output, where=args.output, how=args.output_format, f_id=ID, ab_groups=ab_groups,
                  fun_name=fun_name)
